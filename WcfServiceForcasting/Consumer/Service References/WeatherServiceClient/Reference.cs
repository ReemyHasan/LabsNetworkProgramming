//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Consumer.WeatherServiceClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherForecast", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceForcasting.models")]
    [System.SerializableAttribute()]
    public partial class WeatherForecast : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WindDegreeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WindSpeedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WindDegree {
            get {
                return this.WindDegreeField;
            }
            set {
                if ((this.WindDegreeField.Equals(value) != true)) {
                    this.WindDegreeField = value;
                    this.RaisePropertyChanged("WindDegree");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WindSpeed {
            get {
                return this.WindSpeedField;
            }
            set {
                if ((this.WindSpeedField.Equals(value) != true)) {
                    this.WindSpeedField = value;
                    this.RaisePropertyChanged("WindSpeed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherServiceClient.IForcastService")]
    public interface IForcastService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForcastService/GetWeatherForecast", ReplyAction="http://tempuri.org/IForcastService/GetWeatherForecastResponse")]
        Consumer.WeatherServiceClient.WeatherForecast GetWeatherForecast(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForcastService/GetWeatherForecast", ReplyAction="http://tempuri.org/IForcastService/GetWeatherForecastResponse")]
        System.Threading.Tasks.Task<Consumer.WeatherServiceClient.WeatherForecast> GetWeatherForecastAsync(string city);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IForcastServiceChannel : Consumer.WeatherServiceClient.IForcastService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ForcastServiceClient : System.ServiceModel.ClientBase<Consumer.WeatherServiceClient.IForcastService>, Consumer.WeatherServiceClient.IForcastService {
        
        public ForcastServiceClient() {
        }
        
        public ForcastServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ForcastServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ForcastServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ForcastServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Consumer.WeatherServiceClient.WeatherForecast GetWeatherForecast(string city) {
            return base.Channel.GetWeatherForecast(city);
        }
        
        public System.Threading.Tasks.Task<Consumer.WeatherServiceClient.WeatherForecast> GetWeatherForecastAsync(string city) {
            return base.Channel.GetWeatherForecastAsync(city);
        }
    }
}
